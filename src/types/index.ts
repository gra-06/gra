
// This file was generated by a tool; you should avoid modifying it locally.
// Any changes you make will be overwritten.

/**
 * Default Lexical RichText
 */
export interface DefaultRichText {
  [k: string]: unknown;
}

export interface PayloadMedia {
    id: string;
    alt: string;
    updatedAt: string;
    createdAt: string;
    url?: string;
    filename?: string;
    mimeType?: string;
    filesize?: number;
    width?: number;
    height?: number;
}

export interface Category {
  id: string;
  title?: string;
  slug?: string;
  updatedAt: string;
  createdAt: string;
}

export interface Project {
  id: string;
  name: string;
  slug?: string;
  date?: string;
  client?: string;
  categories: Category[];
  services?: string[];
  mainImage?: PayloadMedia;
  overview?: {
    [k: string]: unknown;
  };
  challenge?: {
    [k: string]: unknown;
  };
  solution?: {
    [ s: string ]: unknown;
  },
  result?: {
    [ s: string ]: unknown;
  },
  caseStudy?: {
    stage: string;
    description?: {
      [k: string]: unknown;
    };
    image?: PayloadMedia;
    id?: string;
  }[];
  layout?: (
    | {
        images: {
          image: PayloadMedia;
          caption?: string;
          id?: string;
        }[];
        id?: string;
        blockName?: string;
        blockType: 'imageGallery';
      }
    | {
        image: PayloadMedia;
        id?: string;
        blockName?: string;
        blockType: 'fullWidthImage';
      }
    | {
        leftContent: {
          [k: string]: unknown;
        };
        rightContent: {
          [k: string]: unknown;
        };
        id?: string;
        blockName?: string;
        blockType: 'twoColumnText';
      }
    | {
        videoFile?: string | PayloadMedia;
        caption?: string;
        id?: string;
        blockName?: string;
        blockType: 'videoBlock';
      }
  )[];
  relatedProjects?: (string | Project)[]
  tags?: {
    tag: string;
    id?: string;
  }[];
  location?: {
    latitude?: number;
    longitude?: number;
  }
  updatedAt: string;
  createdAt: string;
}

export interface Author {
  id: string;
  name?: string;
  image?: PayloadMedia;
  updatedAt: string;
  createdAt: string;
}

export interface Post {
  id: string;
  title?: string;
  slug?: string;
  excerpt?: string;
  author: Author;
  mainImage: PayloadMedia;
  categories?: (string | PostCategory)[];
  publishedAt: string;
  body?: {
    [k: string]: unknown;
  };
  tags?: {
    tag: string;
    id?: string;
  }[];
  updatedAt: string;
  createdAt: string;
}

export interface PostCategory {
  id: string;
  title?: string;
  slug?: string;
  description?: string;
  updatedAt: string;
  createdAt: string;
}


// GAMIFICATION TYPES
export type GameEvent = 'PROJECT_VISIT' | 'POST_VISIT' | 'CHAT_WITH_AI' | 'PAGE_VIEW';

export interface Badge {
    id: string;
    name: string;
    description: string;
    icon: string;
    event: GameEvent;
    count: number;
    secret: boolean;
}

export interface UserProgress {
    events: { [key in GameEvent]?: number };
    uniqueEvents: { [key in GameEvent]?: string[] };
    earnedBadges: string[];
}

export interface Brand {
    id: string;
    name: string;
    logo: PayloadMedia;
    website?: string;
}
